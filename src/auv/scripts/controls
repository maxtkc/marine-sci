#!/usr/bin/env python

# Subscribes to /drive and drives the auv
# Uses linear x (-1, 1) and angular z (-1, 1)

import rospy

from gpiozero.pins.pigpio import PiGPIOFactory
from gpiozero import PWMLED, Device, LED
from time import sleep

PWM1_PIN = 12
PWM2_PIN = 13
EN1_PIN = 22
EN2_PIN = 23
DIR1_PIN = 24
DIR2_PIN = 25

Device.pin_factory = PiGPIOFactory(host='10.42.0.1')

pwm1 = PWMLED(12)
pwm2 = PWMLED(13)
en1 = LED(22)
en2 = LED(23)
dir1 = LED(24)
dir2 = LED(25)

def enable():
    en1.on()
    en2.on()

def disable():
    en1.off()
    en2.off()

# Takes two [-1, 1] values
def set(m1_speed, m2_speed):
    if(m1_speed < 0):
        m1_speed = -m1_speed
        m1_dir_value = 1
    else:
        m1_dir_value = 0
    if(m2_speed < 0):
        m2_speed = -m2_speed
        m2_dir_value = 1
    else:
        m2_dir_value = 0


    if(m1_speed > 1):
        m1_speed = 1

    if(m2_speed > 1):
        m2_speed = 1
    
    dir1.value = m1_dir_value
    dir2.value = m2_dir_value

    pwm1.value = m1_speed
    pwm2.value = m2_speed

from geometry_msgs.msg import Twist

# https://robotics.stackexchange.com/questions/2011/how-to-calculate-the-right-and-left-speed-for-a-tank-like-rover
# assumes theta in degrees and r = 0 to 100 %
# returns a tuple of percentages: (left_thrust, right_thrust)
def throttle_angle_to_thrust(r, theta):
    theta = ((theta + 180) % 360) - 180  # normalize value to [-180, 180)
    r = min(max(0, r), 100)              # normalize value to [0, 100]
    v_a = r * (45 - theta % 90) / 45          # falloff of main motor
    v_b = min(100, 2 * r + v_a, 2 * r - v_a)  # compensation of other motor
    if theta < -90: return -v_b, -v_a
    if theta < 0:   return -v_a, v_b
    if theta < 90:  return v_b, v_a
    return v_a, -v_b

def callback(data):
    
    rospy.loginfo(rospy.get_caller_id() + "r: %s, theta: %s", 100 * data.linear.x, -90 * data.angular.z)

    thrusts = throttle_angle_to_thrust(100 * data.linear.x, -90 * data.angular.z)
    rospy.loginfo(thrusts)

    rospy.loginfo("left: %s, right: %s", thrusts[0] / 100, thrusts[1] / 100)
    set(thrusts[0] / 100, thrusts[1] / 100)

def listener():

    enable()

    # In ROS, nodes are uniquely named. If two nodes with the same
    # name are launched, the previous one is kicked off. The
    # anonymous=True flag means that rospy will choose a unique
    # name for our 'listener' node so that multiple listeners can
    # run simultaneously.
    rospy.init_node('controls', anonymous=True)

    rospy.Subscriber("drive", Twist, callback)

    # spin() simply keeps python from exiting until this node is stopped
    rospy.spin()
    
    disable()

if __name__ == '__main__':
    listener()
